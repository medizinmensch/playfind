{"version":3,"sources":["hoc/Layout/Layout.js","components/Questions/Question/Question.js","components/Answers/Answer/Answer.js","components/Answers/Answers.js","hoc/Questionboxes/Questionbox/Questionbox.js","components/Solution/Solution.js","container/Playfind/Playfind.js","App.js","serviceWorker.js","index.js"],"names":["Layout","react_default","a","createElement","Fragment","className","this","props","children","Component","Question","questionText","Answer","Button_default","variant","nextquestionid","nextQuestionId","solutionid","solutionId","onClick","onAnswerClick","text","Answers","answers","map","Answers_Answer_Answer","key","Id","Text","NextQuestionId","SolutionId","Questionbox","Questions_Question_Question","question","QuestionText","components_Answers_Answers","Solution","description","href","url","target","rel","resetQuiz","data","require","eShowMode","start","questions","solution","Playfind","state","showMode","currentBoxId","event","console","log","attributes","value","_this","setState","error","onResetClick","forceUpdate","_this2","currentBox","boxContent","Questions","find","i","Questionboxes_Questionbox_Questionbox","Solutions","components_Solution_Solution","Description","Url","App","hoc_Layout_Layout","container_Playfind_Playfind","Boolean","window","location","hostname","match","app","integrity","crossOrigin","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f0b3e16.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Layout.css\";\n\nclass Layout extends Component {\n  render() {\n    return (\n      <>\n        {/* <div>Sidedrawer, Backdrop</div> */}\n        <main className=\"Layout\">{this.props.children}</main>\n      </>\n    );\n  }\n}\n\nexport default Layout;\n","import React from \"react\";\nimport \"./Question.css\";\n\nconst Question = props => {\n  return (\n    <div className=\"Question\">\n      <p>{props.questionText}</p>\n    </div>\n  );\n};\n\nexport default Question;\n","import React from \"react\";\nimport \"./Answer.css\";\nimport Button from \"react-bootstrap/Button\";\n\nconst Answer = props => {\n  return (\n    <div className=\"Answer\">\n      <Button\n        variant=\"secondary\"\n        nextquestionid={props.nextQuestionId}\n        solutionid={props.solutionId}\n        onClick={props.onAnswerClick}\n      >\n        {props.text}\n      </Button>\n    </div>\n  );\n};\n\nexport default Answer;\n","import React from \"react\";\nimport Answer from \"./Answer/Answer\";\nimport \"./Answers.css\";\n\nconst Answers = props => {\n  let answers = props.answers.map(a => (\n    <Answer\n      key={a.Id}\n      text={a.Text}\n      nextQuestionId={a.NextQuestionId}\n      solutionId={a.SolutionId}\n      onAnswerClick={props.onAnswerClick}\n    />\n  ));\n\n  return <div className=\"Answers\">{answers}</div>;\n};\n\nexport default Answers;\n","import React from \"react\";\nimport Question from \"../../../components/Questions/Question/Question\";\nimport Answers from \"../../../components/Answers/Answers\";\n\nimport \"./Questionbox.css\";\n\nconst Questionbox = props => {\n  return (\n    <div className=\"Questionbox\">\n      <Question questionText={props.question.QuestionText} />\n      <div className=\"Answers\">\n        <Answers\n          answers={props.question.Answers}\n          onAnswerClick={props.onAnswerClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Questionbox;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nconst Solution = props => {\n  return (\n    <div className=\"Solution\">\n      <h1>Fertig!</h1>\n      <p>\n        Wir haben etwas für dich! Wie wäre es mit der{\" \"}\n        <b>\"{props.description}\"</b>-Playlist?\n      </p>\n      <div>\n        <Button\n          className=\"Button\"\n          href={props.url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Bring mich zur Playlist\n        </Button>\n        <Button\n          className=\"Button\"\n          variant=\"secondary\"\n          onClick={props.resetQuiz}\n        >\n          Lass mich nochmal suchen\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Solution;\n","import React, { Component } from \"react\";\n// import axios from \"axios\";\nimport \"./Playfind.css\";\n\nimport Questionbox from \"../../hoc/Questionboxes/Questionbox/Questionbox\";\nimport Solution from \"../../components/Solution/Solution\";\nvar data = require(\"../../assets/musicfy_real.json\");\n\nvar eShowMode = {\n  start: 1,\n  questions: 2,\n  solution: 3\n};\n\nclass Playfind extends Component {\n  state = {\n    showMode: eShowMode.questions,\n    currentBoxId: 1\n  };\n\n  // state = { start values\n  //   showMode: eShowMode.questions,\n  //   currentBoxId: 1\n  // };\n\n  componentDidMount() {}\n\n  onAnswerClick = event => {\n    console.log(event.target.attributes);\n\n    const nextQuestionId = +event.target.attributes.nextquestionid\n      .value;\n    const solutionId = +event.target.attributes.solutionId.value;\n    console.log(solutionId);\n\n    if (nextQuestionId !== 0) {\n      this.setState({\n        showMode: eShowMode.questions,\n        currentBoxId: nextQuestionId\n      });\n    } else if (solutionId !== 0) {\n      this.setState({\n        showMode: eShowMode.solution,\n        currentBoxId: solutionId\n      });\n    } else {\n      console.error(\"Database error: nextQuestionId is unvalid\");\n    }\n    console.log(this.state);\n    \n  };\n\n  onResetClick = event => {\n    console.log(\"triggered\");\n\n    this.setState({\n      showMode: eShowMode.questions,\n      currentBoxId: 1\n    });\n\n    this.forceUpdate();\n  };\n\n  render() {\n    let currentBox = <p>Error</p>;\n\n    if (this.state.showMode === eShowMode.questions) {\n      const boxContent = data.Questions.find(\n        i => i.Id === this.state.currentBoxId\n      );\n\n      currentBox = (\n        <>\n          <Questionbox\n            onAnswerClick={this.onAnswerClick}\n            question={boxContent}\n            resetQuiz={this.onResetClick}\n          />\n        </>\n      );\n    } else if (this.state.showMode === eShowMode.solution) {\n      const boxContent = data.Solutions.find(\n        i => (i.Id === this.state.currentBoxId)\n      );\n      currentBox = (\n        <Solution\n          description={boxContent.Description}\n          url={boxContent.Url}\n          resetQuiz={this.onResetClick}\n        />\n      );\n    }\n\n    return (\n      <>\n        {/* <Solution /> */}\n        <div className=\"backdrop\">{currentBox}</div>\n      </>\n    );\n  }\n}\n\nexport default Playfind;\n","import React, { Component } from \"react\";\nimport Layout from \"./hoc/Layout/Layout\";\nimport Playfind from \"./container/Playfind/Playfind\"\n\nimport \"./App.css\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Playfind></Playfind>\n        </Layout>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst app = (\n  <>\n    {\" \"}\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n      integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n      crossOrigin=\"anonymous\"\n    />\n    <App />\n  </>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}